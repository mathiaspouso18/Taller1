Boolean.h

	#ifndef BOOLEAN_H_INCLUDED
	#define BOOLEAN_H_INCLUDED

	typedef enum{FALSE, TRUE} Boolean;

	#endif // BOOLEAN_H_INCLUDED


String.h
	
	#ifndef STRING_H_INCLUDED
	#define STRING_H_INCLUDED

	#include "Boolean.h"

	const int MAX = 80;
	typedef char * String;

	#endif // STRING_H_INCLUDED
	

ListaParametros.h
	
	#ifndef LISTAPARAMETROS_H_INCLUDED
	#define LISTAPARAMETROS_H_INCLUDED

	#include "String.h"

	typedef struct nodo_string{String info;
							   nodo_string * sig;} Nodo;
	typedef Nodo * ListaParam;

	#endif // LISTAPARAMETROS_H_INCLUDED

	
Termino.h

	#ifndef TERMINO_H_INCLUDED
	#define TERMINO_H_INCLUDED

	typedef struct {int base;
					int exponente;} Termino;
	
	#endif // TERMINO_H_INCLUDED
	
	
ListaTerminos.h

	#ifndef LISTATERMINOS_H_INCLUDED
	#define LISTATERMINOS_H_INCLUDED
	
	#include "Termino.h"
	
	typedef struct nodo_termino{Termino info;
							   nodo_termino * sig;} Nodo;
	typedef Nodo * ListaTerm;
	
	#endif // LISTATERMINOS_H_INCLUDED
	
	
Polinomio.h

	#ifndef POLINOMIO_H_INCLUDED
	#define POLINOMIO_H_INCLUDED
	
	#include "String.h"
	#include "ListaTerminos.h"
	
	typedef struct nodo_int{String nombre;
							ListaTerm Listaterminos} Polinomio;
	
	#endif // POLINOMIO_H_INCLUDED
	
	
ABBPolinomio.h

	#ifndef ABBPOLINOMIO_H_INCLUDED
	#define ABBPOLINOMIO_H_INCLUDED

	#include "Polinomio.h"

	typedef struct nodoN{Polinomio info;
                   nodoN *hizq;
                   nodoN *hder;} nodo;

	typedef nodo *Arbol;

	#endif // ABBPOLINOMIO_H_INCLUDED
	
	
Errores.h

	typedef enum{//ACA VAN LOS ERRORES QUE TENEMOS QUE DEFINIR} ErroresEnum;
	
EnumComandos.h

	typedef enum{CREAR, SUMAR, MULTIPLICAR, EVALUAR, ES_RAIZ, MOSTRAR, GUARDAR, RECUPERAR, SALIR} EnumComandos;
